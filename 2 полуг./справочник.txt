print( )            #вывод переменной
print(' ')          #вывод текста
print(f' ',end=' ')          #вывод форматированный в строку
if (not(y<=x) or (z<=w) or not(z))==False          #условие лжи
goto(x*30,y*30)           #переходить по точкам
dot(5)           # нарисовать точку
chislo='10'+num[2:]+'0'  # склейка
if num.count('1')%2!=0          #остаток от деления и проверка на четность 
if s[0]!='0' and s.count('6')==1:
  if s[-1]=='6' and int(s[-2])%2==0: count+=1
  if s[0]=='6' and int(s[1])%2==0: count+=1
  if '6' in s[1:-1] and int(s[s.index('6')-1])%2==0 and int(s[s.index('6')+1])%2==0           #
  if all(num%delit!=0 for delit in range(2,num))          #условие простого числа
  f=int(f'123{x}5',15)+int(f'1{x}233',15)
  if  f%14 ==0:
        print(x,f//14)           #
if all(((x%2==0) <= (x%3!=0)) or (x+a>=100) for x in range(1,1000)):
        print(a)          #подбор числа для определенного логического условия
if a==b:    #проверка условия а=b
  break #выход из цикла
elif a!=b: #если первое условие не прошло, то...
  print(a)
else: #если все условия не прошли, то...
  print(a,b)
def f(): #функция
  f() #вызов функции 
any() #возвращает True если любой из элементов True, возвращает False если список/строка пуста или всё False
all() #возвращает True если все элементы True (или пусто), возвращает False если хотя бы одно из значения false/пусто
str() #преобразование к строковому типу
int() #преобразование к целочисленному типу
float() #преобразование к числу с плавающей запятой
list() #преобразование к списку
set() 3преобразование к множеству
len() #вычислить длину итерируемого объекта
input(пояснение) #ввод
max() #нахождение максимального значения
min() #нахождение минимального значения
sum() #суммирует все элементы
abs() #модуль числа
sqrt() #квадратный корень из числа
round() #округление float числа

 a=input() #введение числа с клавиатуры
 print(f' ',end=' ') #вывод форматированный в строку
 
while True:   #вечный цикл с выходом по break
    break
    
 for i in range(1,10,3): #перебор (начало, конец, шаг)
  break
 for x in range (5): #двойной перебор  # 00 01 02 03 04 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 40 41 42 43 44 
    for y in range(5):
        print(str(x)+str(y),end=' ')
 
num=(bin(i)[2:]) #перевод в 2 СС и срез
num.count('1') #количество входов символа в списке/строке
num.index('6')  #индекс элемента в списке/строке
num.append() #добавить значение 
num.sort(reverse=True) #сортировать список по убыванию
int(chislo,2) #перевод в целое из 2 СС
''.join() #объединение всех элементов, в '' знак разделения
l.expand() #добавить к списку элементы другого списка
reversed(l) #инвертирует порядок элеметов списка
sorted(l) #сортирует элементы списка по алфавиту, по возрастанию и т.п.
filter(переменная, условие фильтрации) #фильтрует по определенному значению
map(с чем делаем, что делаем) #преобразование элементов
reduce(функция, последователньость) #преобразование элементов в один
lambda x: int(x) #пример безымянной функции
exit() #завершение программы
s=[]  #создание списка
s[0]  #доступ к первому элементу списка/строки
l=[x for x in range(10)]  #использовани генератора для создания списка
round(i**0.5)  #округление
a=12334567
str(a)  #перевод в строку
a=a.replace('12','aa')  #замена подстроки
b=a.split()  #создание списка шинковкой строки по определенному знаку
a=list(map(int,a))  #создание списка целых значений из а
with open('24.txt') as f:  #загрузка с тектового файла одной строчки в список
   n=f.readline()
 with open('17.txt') as f: #загрузка с тектового файла в список с преобразованием в числа
   numbers=[int(x) for x in f] 
def f(n):
   return 2*f(n-2)   #рекурсия
print(f(26))
from turtle import *
left(90)    #поворот налево 90гр
forward(300) #вперед на 300 единиц
right(120)   #поворот направо 120гр
pu()         #поднять перо         
done()           #запустить рисование
from itertools import product
data = list(product((0, 1), (2, 3))) #позволяет получить из введенной последовательности чисел или символов новую совокупность групп во всех возможных вариациях
print(data)
[(0, 2), (0, 3), (1, 2), (1, 3)]
